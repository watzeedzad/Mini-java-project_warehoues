package project.warehouse.function;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.DateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.Borders;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import project.warehouse.driver.UIMethods;

//  @author Better3
public class ExportFileType {
    private static UIMethods ctrl = new UIMethods();
    
    //  เมธอดภายในสำหรับเพิ่ม Tab ตามจำนวนครั้งที่กำหนดเอาไว้
    private static void addTab(XWPFRun run, int b) {
        for (int a = 0; a < b; a++) {
            run.addTab();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Word (.doc) ใดๆ
    public static void exportToDoc(Object[][] model, File file) {
        XWPFDocument doc = new XWPFDocument();
        XWPFParagraph par = doc.createParagraph(), par1 = doc.createParagraph(), par2 = doc.createParagraph();
        XWPFRun run = par.createRun(),
            run1 = par1.createRun(), run2 = par1.createRun(),
            run3 = par2.createRun();
        
        //  สร้างส่วนหัวเรื่อง (Header) ลงไป
        run.setFontFamily("Segoe UI Semilight");
        run.setFontSize(22);
        run.setText("Stock Report");
        run.addBreak();
        par.addRun(run);
        par.setBorderBottom(Borders.SINGLE);
        run1.addBreak();
        par1.addRun(run1);
        
        //  สร้างส่วนเนื้อหา (Content) ลงไป
        run2.setFontFamily("Segoe UI Semilight");
        run2.setFontSize(18);
        run2.setText("This is current stocks in the warehouse.");
        run2.addBreak();
        par1.setAlignment(ParagraphAlignment.CENTER);
        par1.addRun(run2);
        
        run3.setFontFamily("Segoe UI Semilight");
        run3.setFontSize(14);
        run3.setText("Product ID");
        addTab(run3, 3);
        run3.setText("Name");
        addTab(run3, 2);
        run3.setText("Amount");
        addTab(run3, 2);
        run3.setText("Last modified");
        run3.addBreak();
        addTab(run3, 10);
        run3.setText("by User ID");
        run3.addBreak();
        
        for (Object[] value : model) {
            for (int i = 0; i < 4; i++) {
                if (String.valueOf(value[0]).length() < 5) {
                    run3.setText(String.valueOf(value[i]));
                    switch (i) {
                        case 0 :    addTab(run3, 4);
                                    break;
                        case 1 :    addTab(run3, 2);
                                    break;
                        case 2 :    addTab(run3, 3);
                                    break;
                    }
                } else if (String.valueOf(value[0]).length() > 10) {
                    run3.setText(String.valueOf(value[i]));
                    switch (i) {
                        case 0 :    addTab(run3, 2);
                                    break;
                        case 1 :    addTab(run3, 3);
                                    break;
                        case 2 :    addTab(run3, 3);
                                    break;
                    }
                } else {
                    run3.setText(String.valueOf(value[i]));
                    if (i < 3) {
                        addTab(run3, 3);
                    }
                }
            }
            run3.addBreak();
        }

        //  สร้างส่วนท้ายเรื่อง (Footer) ลงไป
        run3.addBreak();
        run3.setText("This report was generated by: " + User.getUsername() + " (User ID: " + User.getUserId() + ")");
        run3.addBreak();
        run3.setText(DateFormat.getDateTimeInstance().format(new Date()));
        par2.addRun(run3);
        
        try {
            FileOutputStream fos = new FileOutputStream(new File(file + ".doc"));
            doc.write(fos);
            fos.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".doc" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Word (.docx) ใดๆ
    public static void exportToDocx(Object[][] model, File file) {
        XWPFDocument doc = new XWPFDocument();
        XWPFParagraph par = doc.createParagraph(), par1 = doc.createParagraph(), par2 = doc.createParagraph();
        XWPFRun run = par.createRun(),
            run1 = par1.createRun(), run2 = par1.createRun(),
            run3 = par2.createRun();
        
        //  สร้างส่วนหัวเรื่อง (Header) ลงไป
        run.setFontFamily("Segoe UI Semilight");
        run.setFontSize(22);
        run.setText("Stock Report");
        run.addBreak();
        par.addRun(run);
        par.setBorderBottom(Borders.SINGLE);
        run1.addBreak();
        par1.addRun(run1);
        
        //  สร้างส่วนเนื้อหา (Content) ลงไป
        run2.setFontFamily("Segoe UI Semilight");
        run2.setFontSize(18);
        run2.setText("This is current stocks in the warehouse.");
        run2.addBreak();
        par1.setAlignment(ParagraphAlignment.CENTER);
        par1.addRun(run2);
        
        run3.setFontFamily("Segoe UI Semilight");
        run3.setFontSize(14);
        run3.setText("Product ID");
        addTab(run3, 3);
        run3.setText("Name");
        addTab(run3, 2);
        run3.setText("Amount");
        addTab(run3, 2);
        run3.setText("Last modified");
        run3.addBreak();
        addTab(run3, 10);
        run3.setText("by User ID");
        run3.addBreak();
        
        for (Object[] value : model) {
            for (int i = 0; i < 4; i++) {
                if (String.valueOf(value[0]).length() < 5) {
                    run3.setText(String.valueOf(value[i]));
                    switch (i) {
                        case 0 :    addTab(run3, 4);
                                    break;
                        case 1 :    addTab(run3, 2);
                                    break;
                        case 2 :    addTab(run3, 3);
                                    break;
                    }
                } else if (String.valueOf(value[0]).length() > 10) {
                    run3.setText(String.valueOf(value[i]));
                    switch (i) {
                        case 0 :    addTab(run3, 2);
                                    break;
                        case 1 :    addTab(run3, 3);
                                    break;
                        case 2 :    addTab(run3, 3);
                                    break;
                    }
                } else {
                    run3.setText(String.valueOf(value[i]));
                    if (i < 3) {
                        addTab(run3, 3);
                    }
                }
            }
            run3.addBreak();
        }

        //  สร้างส่วนท้ายเรื่อง (Footer) ลงไป
        run3.addBreak();
        run3.setText("This report was generated by: " + User.getUsername() + " (User ID: " + User.getUserId() + ")");
        run3.addBreak();
        run3.setText(DateFormat.getDateTimeInstance().format(new Date()));
        par2.addRun(run3);
        
        try {
            FileOutputStream fos = new FileOutputStream(new File(file + ".docx"));
            doc.write(fos);
            fos.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".docx" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ PDF (.pdf) ใดๆ
    public static void exportToPdf(Object[][] model, File file) {
        try {
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(new File(file + ".pdf")));
            doc.open();
            PdfHandler.addMetaData(doc);
            PdfHandler.addCover(doc);
            PdfHandler.addContent(doc, model);
            doc.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".pdf" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (DocumentException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Rich Text (.rtf) ใดๆ
    public static void exportToRtf(Object[][] model, File file) {
        
        //  สร้างส่วนหัวเรื่อง (Header) ลงไป
        String temp = "Stocks Report" + System.getProperty("line.separator") + System.getProperty("line.separator") +
                      "This is current stocks in the warehouse." + System.getProperty("line.separator") + System.getProperty("line.separator") +
                      "Product ID" + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Name" + String.valueOf('\u0009') + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Amount" + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Last modified by User ID" + System.getProperty("line.separator");
        
        //  สร้างส่วนเนื้อหา (Content) ลงไป
        for (Object[] value : model) {
            for (int i = 0; i < 4; i++) {
                temp += value[i] + String.valueOf('\u0009') + String.valueOf('\u0009') + String.valueOf('\u0009');
            }
            temp += System.getProperty("line.separator");
        }
        
        //  สร้างส่วนท้ายเรื่อง (Footer) ลงไป
        temp += System.getProperty("line.separator") + "This report was generated by: " + User.getUsername() +
                " (User ID: " + User.getUserId() + ")" + System.getProperty("line.separator") +
                DateFormat.getDateTimeInstance().format(new Date());
        
        try {
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(file + ".rtf"))));
            bw.write(temp);
            bw.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".rtf" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Text (.txt) ใดๆ
    public static void exportToTxt(Object[][] model, File file) {
        
        //  สร้างส่วนหัวเรื่อง (Header) ลงไป
        String temp = "Stocks Report" + System.getProperty("line.separator") + System.getProperty("line.separator") +
                      "This is current stocks in the warehouse." + System.getProperty("line.separator") + System.getProperty("line.separator") +
                      "Product ID" + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Name" + String.valueOf('\u0009') + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Amount" + String.valueOf('\u0009') + String.valueOf('\u0009') + String.valueOf('\u0009') +
                      "Last modified by User ID" + System.getProperty("line.separator");
        
        //  สร้างส่วนเนื้อหา (Content) ลงไป
        for (Object[] value : model) {
            for (int i = 0; i < 4; i++) {
                temp += value[i] + String.valueOf('\u0009') + String.valueOf('\u0009') + String.valueOf('\u0009');
            }
            temp += System.getProperty("line.separator");
        }
        
        //  สร้างส่วนท้ายเรื่อง (Footer) ลงไป
        temp += System.getProperty("line.separator") + "This report was generated by: " + User.getUsername() +
                " (User ID: " + User.getUserId() + ")" + System.getProperty("line.separator") +
                DateFormat.getDateTimeInstance().format(new Date());
        
        try {
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(file + ".txt"))));
            bw.write(temp);
            bw.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".txt" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Excel (.xls) ใดๆ
    public static void exportToXls(Object[][] model, File file) {
        int cellIndex = 0, rowIndex = 0;
        Workbook workbook = new HSSFWorkbook();
        Sheet worksheet = workbook.createSheet("Stocks Report");
        Row row = worksheet.createRow(rowIndex++);
        
        //  สร้างส่วนหัวเรื่อง (Header) ของตาราง
        row.createCell(cellIndex++).setCellValue("Product ID");
        row.createCell(cellIndex++).setCellValue("Name");
        row.createCell(cellIndex++).setCellValue("Amount");
        row.createCell(cellIndex++).setCellValue("Last modified by User ID");
        
        for (Object[] value : model) {
            row = worksheet.createRow(rowIndex++);
            cellIndex = 0;
            
            //  สร้างส่วนเนื้อหา (Content) ของตาราง
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[0]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[1]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[2]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[3]));
        }
        cellIndex = 0;
        row = worksheet.createRow(rowIndex++);
        
        //  สร้างส่วนท้ายเรื่อง (Footer) ของตาราง
        row = worksheet.createRow(rowIndex++);
        row.createCell(cellIndex).setCellValue("This report was generated by: " + User.getUsername() +
            " (User ID: " + User.getUserId() + ")");
        row = worksheet.createRow(rowIndex);
        row.createCell(cellIndex).setCellValue(DateFormat.getDateTimeInstance().format(new Date()));
        
        try {
            FileOutputStream fos = new FileOutputStream(new File(file + ".xls"));
            workbook.write(fos);
            fos.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".xls" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //  เมธอดสำหรับใส่ค่าที่ได้จาก CheckStock.dataModel(boolean bl) ลงในรูปแบบไฟล์ Excel (.xlsx) ใดๆ
    public static void exportToXlsx(Object[][] model, File file) {
        int cellIndex = 0, rowIndex = 0;
        Workbook workbook = new XSSFWorkbook();
        Sheet worksheet = workbook.createSheet("Stocks Report");
        Row row = worksheet.createRow(rowIndex++);
        
        //  สร้างส่วนหัวเรื่อง (Header) ของตาราง
        row.createCell(cellIndex++).setCellValue("Product ID");
        row.createCell(cellIndex++).setCellValue("Name");
        row.createCell(cellIndex++).setCellValue("Amount");
        row.createCell(cellIndex++).setCellValue("Last modified by User ID");
        
        for (Object[] value : model) {
            row = worksheet.createRow(rowIndex++);
            cellIndex = 0;
            
            //  สร้างส่วนเนื้อหา (Content) ของตาราง
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[0]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[1]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[2]));
            row.createCell(cellIndex++).setCellValue(String.valueOf(value[3]));
        }
        cellIndex = 0;
        row = worksheet.createRow(rowIndex++);
        
        //  สร้างส่วนท้ายเรื่อง (Footer) ของตาราง
        row = worksheet.createRow(rowIndex++);
        row.createCell(cellIndex).setCellValue("This report was generated by: " + User.getUsername() +
            " (User ID: " + User.getUserId() + ")");
        row = worksheet.createRow(rowIndex);
        row.createCell(cellIndex).setCellValue(DateFormat.getDateTimeInstance().format(new Date()));
        
        try {
            FileOutputStream fos = new FileOutputStream(new File(file + ".xlsx"));
            workbook.write(fos);
            fos.close();
        }
        //  แสดงข้อความของข้อผิดพลาดเนื่องจากไฟล์ที่กำหนดเอาไว้ยังคงถูกใช้งานอยู่
        catch (FileNotFoundException e) {
            if (e.getMessage().contains("(The process cannot access the file because it is being used by another process)")) {
                String msg = "Oops! It seems that the file \"" + file + ".xlsx" + "\" is currently being used." +
                    "\nPlease close this file before we proceed.";
                JOptionPane.showMessageDialog(null, msg, " Warning !", JOptionPane.WARNING_MESSAGE, ctrl.warnIcon);
            }
            //  แสดงข้อความของข้อผิดพลาดอิ่นๆนอกเหนือไปจากข้อความข้างต้น
            else {
                System.err.println("Oops!, There's an internal error.");
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}